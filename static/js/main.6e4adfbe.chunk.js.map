{"version":3,"sources":["components/Buttons/Buttons.module.css","components/Stopwatch/Stopwatch.module.css","components/Buttons/Buttons.jsx","components/Timer/Timer.jsx","components/Stopwatch/Stopwatch.jsx","App.js","reportWebVitals.js","index.js","components/Timer/Timer.module.css"],"names":["module","exports","Buttons","state","startButtonStatus","isWait","waitButtonTimer","setStartButtonStatus","setState","prevState","handleTimerStartButton","props","startTimer","stopTimer","handleWaitTimerButton","waitTimer","currentTime","Date","getTime","handleResetButton","resetTimer","this","className","style","buttons","onClick","React","Component","Timer","time","timer","timer_screen","hour","min","sec","defaultTimerValue","Stopwatch","intervalTimer","timerStream$","checkTimerUpdates","updatedTime","isResetTime","stream$","Observable","observer","interval","setInterval","next","subscribe","res","call","clearInterval","stopwatch_wrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e4adfbe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__3MAfi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stopwatch_wrapper\":\"Stopwatch_stopwatch_wrapper__20v0w\"};","import React from 'react';\n\nimport style from './Buttons.module.css';\n\nclass Buttons extends React.Component {\n  state = {\n    startButtonStatus: 'Start',\n    isWait: false,\n    waitButtonTimer: null\n  }\n\n  setStartButtonStatus = () =>{\n    this.setState(prevState => ({\n      startButtonStatus: prevState.startButtonStatus === 'Start' ? 'Stop' : 'Start',\n    }));\n  }\n\n  handleTimerStartButton = () => {\n    const { startTimer, stopTimer } = this.props;\n    const { startButtonStatus, isWait } = this.state;\n\n    if (startButtonStatus === 'Start') {\n      const isResetTimer = isWait ? false : true;\n\n      startTimer(isResetTimer);\n\n      this.setState({\n        isWait: false\n      });\n    } else {\n      stopTimer();\n    }\n\n    this.setStartButtonStatus();\n  }\n\n  handleWaitTimerButton = () => {\n    const { waitTimer } = this.props;\n    const { waitButtonTimer, startButtonStatus } = this.state;\n\n    const currentTime = new Date();\n\n    if (startButtonStatus === 'Start')\n      return;\n\n    if (waitButtonTimer) {\n      if (currentTime.getTime() - waitButtonTimer <= 300)\n        return;\n    }\n\n    this.setState({\n      startButtonStatus: 'Start',\n      isWait: true,\n      waitButtonTimer: currentTime.getTime()\n    });\n\n    waitTimer();\n  }\n\n  handleResetButton = () => {\n    const { resetTimer } = this.props;\n\n    this.setState({\n      startButtonStatus: 'Start'\n    });\n\n    resetTimer();\n  }\n\n  render() {\n    const { startButtonStatus } = this.state;\n    \n    return(\n      <div className={style.buttons}>\n        <button onClick={this.handleTimerStartButton}>{startButtonStatus}</button>\n        <button onClick={this.handleWaitTimerButton}>Wait</button>\n        <button onClick={this.handleResetButton}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Buttons;","import React from 'react';\nimport style from './Timer.module.css'\n\nclass Timer extends React.Component {\n  render(){\n    const { time } = this.props;\n    return(\n      <div className={style.timer}><p>Timer:</p>\n        <div className={style.timer_screen}>\n          <span>{(time.hour < 10)? \"0\" + time.hour : time.hour}</span>\n          <span>{(time.min < 10)? \"0\" + time.min : time.min}</span>\n          <span>{(time.sec < 10)? \"0\" + time.sec : time.sec}</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport { Observable } from 'rxjs'\n\nimport Buttons from '../Buttons/Buttons';\nimport Timer from '../Timer/Timer';\n\nimport style from './Stopwatch.module.css';\n\nconst defaultTimerValue = {\n  hour: 0,\n  min: 0,\n  sec: 0,\n};\n\nclass Stopwatch extends Component {\n  state = {\n    time: defaultTimerValue,\n    intervalTimer: null,\n    timerStream$: null\n  }\n\n  checkTimerUpdates = () => {\n    const { time } = this.state;\n    const updatedTime = { ...time };\n\n    if(updatedTime.sec === 60){\n      updatedTime.min++;\n      updatedTime.sec = 0;\n    }\n\n    if(updatedTime.min === 60){\n      updatedTime.hour++;\n      updatedTime.min = 0;\n    }\n\n    updatedTime.sec++;\n\n    this.setState({\n      time: updatedTime\n    });\n  }\n\n  startTimer = (isResetTime) => {\n    if (isResetTime) {\n      this.setState({\n        time: defaultTimerValue\n      });\n    }\n\n    const stream$ = new Observable(observer => {\n\n      const interval = setInterval(() => observer.next(), 1000);\n      \n      this.setState({\n        intervalTimer: interval\n      });\n    })\n\n    stream$.subscribe(res => {\n      this.checkTimerUpdates.call(this);\n    });\n\n    this.setState({\n      timerStream$: stream$\n    });\n  }\n\n  stopTimer = () => {\n    const { intervalTimer } = this.state;\n\n    if (intervalTimer) {\n      clearInterval(intervalTimer);\n    }\n\n    this.setState({\n      intervalTimer: null,\n      timerStream$: null\n    });\n  }\n\n  resetTimer = () => {\n    const { intervalTimer } = this.state;\n\n    if (intervalTimer) {\n      clearInterval(intervalTimer);\n    }\n\n    this.setState({\n      time: defaultTimerValue,\n      intervalTimer: null,\n      timerStream$: null\n    });\n  }\n\n  waitTimer = () => {\n    const { intervalTimer } = this.state;\n\n    if (intervalTimer) {\n      this.stopTimer();\n    } else {\n      this.startTimer(false)\n    }\n  }\n\n  render() {\n    const { time } = this.state;\n    \n    return(\n      <div className={style.stopwatch_wrapper}>\n        <Timer time={time}/>\n        <Buttons \n          startTimer={this.startTimer}\n          stopTimer={this.stopTimer} \n          resetTimer={this.resetTimer}\n          waitTimer={this.waitTimer}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Stopwatch;","import React  from 'react';\nimport Stopwatch from './components/Stopwatch/Stopwatch';\n\n\nconst App = (props) => {\n  \n  return(\n    <>\n      <Stopwatch/>\n    </>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"Timer_timer__1M23v\",\"timer_screen\":\"Timer_timer_screen__23g5Q\"};"],"sourceRoot":""}